events {
    worker_connections 1024;
}

http {
    upstream stable_backend {
        server stable-app:3000;
    }
    
    upstream canary_backend {
        server canary-app:3000;
    }
    
    # Split configuration - default to 100% stable
    split_clients $request_id $backend {
        1% canary_backend;
        * stable_backend;
    }
    
    server {
        listen 80;
        server_name localhost;
        
        # API endpoints for controlling traffic split
        location = /admin/traffic/stable {
            return 200 '{"traffic": "100% stable", "canary": "0%"}';
            add_header Content-Type application/json;
        }
        
        location = /admin/traffic/canary-10 {
            # This would need to be updated via API in real implementation
            return 200 '{"traffic": "90% stable", "canary": "10%"}';
            add_header Content-Type application/json;
        }
        
        # Health check aggregation
        location /health/aggregate {
            access_log off;
            proxy_pass http://stable_backend/health;
        }
        
        # Main application traffic
        location / {
            proxy_pass http://$backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Add headers to identify which backend served the request
            add_header X-Backend-Version $upstream_addr always;
        }
    }
}
