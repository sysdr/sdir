events {
    worker_connections 1024;
}

http {
    log_format detailed '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'upstream: $upstream_addr '
                       'response_time: $upstream_response_time';

    access_log /var/log/nginx/access.log detailed;
    error_log /var/log/nginx/error.log;

    upstream backend_shallow {
        # Basic health checks (dangerous - includes zombies)
        server healthy-server:5000 max_fails=3 fail_timeout=30s;
        server zombie-server:5000 max_fails=3 fail_timeout=30s;
        server dead-server:5000 max_fails=3 fail_timeout=30s;
    }

    upstream backend_smart {
        # Only servers that pass deep health checks
        server healthy-server:5000 max_fails=1 fail_timeout=10s;
        # zombie-server intentionally excluded from smart routing
    }

    server {
        listen 80;
        server_name localhost;

        # Dashboard
        location / {
            proxy_pass http://zombie-dashboard:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Shallow health check routing (includes zombies)
        location /api/shallow/ {
            rewrite ^/api/shallow/(.*) /$1 break;
            proxy_pass http://backend_shallow;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_connect_timeout 1s;
            proxy_send_timeout 1s;
            proxy_read_timeout 1s;
        }

        # Smart routing (excludes detected zombies)
        location /api/smart/ {
            rewrite ^/api/smart/(.*) /$1 break;
            proxy_pass http://backend_smart;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_connect_timeout 1s;
            proxy_send_timeout 1s;
            proxy_read_timeout 1s;
        }

        # Health check endpoints for monitoring
        location /lb/status {
            stub_status on;
            access_log off;
        }
    }
}
